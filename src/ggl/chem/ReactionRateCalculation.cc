
#include "ggl/chem/ReactionRateCalculation.hh"

namespace ggl {
 namespace chem {

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
	

	
	RRC_Fixed
	::RRC_Fixed(const double fixRate_ )
	 : fixRate(fixRate_)
	{
		// nothing else to do
	}

////////////////////////////////////////////////////////////////////////////////

	
	
	RRC_Fixed
	::~RRC_Fixed()
	{
		// nothing to do
	}

////////////////////////////////////////////////////////////////////////////////

	
	
	double
	RRC_Fixed
	::getRate( const Reaction & reaction ) const
	{
		  // return the same fixed rate for all reactions
		return fixRate;
	}

////////////////////////////////////////////////////////////////////////////////

	
	
	bool
	RRC_Fixed
	::needTransitionState( void ) const
	{
		  // no transition state needed for this rates .. all fixed !
		return false;
	}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


 } // namespace chem
} // namespace ggl

#include <limits> // for signaling_NaN()

namespace ggl {
 namespace chem {

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
	

	
	RRC_TState
	::RRC_TState()
	{
		// nothing else to do
	}

////////////////////////////////////////////////////////////////////////////////

	
	
	RRC_TState
	::~RRC_TState()
	{
		// nothing to do
	}

////////////////////////////////////////////////////////////////////////////////

	
	
	double
	RRC_TState
	::getRate( const Reaction & reaction ) const
	{
		  // return the same fixed rate for all reactions
		return std::numeric_limits<double>::signaling_NaN();
	}

////////////////////////////////////////////////////////////////////////////////

	
	
	bool
	RRC_TState
	::needTransitionState( void ) const
	{
		  // a transition state is needed ;) !
		return true;
	}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

 } // namespace chem
} // namespace ggl
